.syntax unified
.cpu cortex-m4
.thumb

.text
	.global gpio_init

	.equ RCC_AHB2ENR,  0x4002104C
	.equ RCC_APB2ENR,  0x40021060

	.equ BSRR_OFFSET,  0x18 @ set bit
	.equ BRR_OFFSET,   0x28 @ clear bit

	.equ GPIOA_BASE,   0x48000000
	.equ GPIOA_SPEEDER,0x48000008

	.equ GPIOB_BASE,   0x48000400
	.equ GPIOB_PUPDR,  0x4800040C
	.equ GPIOB_SPEEDER,0x48000408

	.equ GPIOC_BASE,   0x48000800
	.equ GPIOC_PUPDR,  0x4800080C
	.equ GPIOC_SPEEDER,0x48000808

	.equ AFRL_OFFSET,  0x20
	.equ AFRH_OFFSET,  0x24

	.equ GPIOC_BASE,   0x48000800

gpio_init:
	push {r0, r1, r2, lr}

	mov  r0, 0b00000000000000000000000000000111 //GPIOA B C
	ldr  r1, =RCC_AHB2ENR
	ldr  r2, =#RCC_AHB2ENR
	orr  r0,r2
	str  r0, [r1]

	ldr  r1, =GPIOB_BASE // GPIOB_MODER
	ldr  r2, [r1]
	and  r2, 0b11111111111111111111111111110011 //PB1 output
	orr  r2, 0b00000000000000000000000000000100
	str  r2, [r1]

	ldr  r1, =GPIOB_BASE // GPIOB_MODER
	ldr  r2, [r1]
	and  r2, 0b11111111111111111111111111111100 //PB0 input
	orr  r2, 0b00000000000000000000000000000000
	str  r2, [r1]

	ldr r1,=GPIOB_PUPDR
	ldr r2, [r1]
	and r2,#0b11111111111111111111111111110000 //PB0 & PB1 pull-up
	orr r2, 0b00000000000000000000000000000101
	str  r2, [r1]

	ldr  r1, =GPIOB_SPEEDER
	ldr  r2, [r1]
	and  r2, 0b11111111111111111111111111110000 //PB1  50MHz
	orr  r2, 0b00000000000000000000000000001010
	str  r2, [r1]

	ldr  r1, =GPIOB_BASE // GPIOB_MODER
	ldr  r2, [r1]
	and  r2, 0b11111111111111111111111100111111 //PB3 AF
	orr  r2, 0b00000000000000000000000010000000
	str  r2, [r1]

	ldr  r1, =GPIOB_SPEEDER
	ldr  r2, [r1]
	and  r2, 0b11111111111111111111111100111111 //PB3 50MHz
	orr  r2, 0b00000000000000000000000010000000
	str  r2, [r1]


	/*ldr  r1, =GPIOA_BASE // GPIOA_MODER
	ldr  r2, [r1]
	and  r2, 0b11111111111111110000001111111111 //PA5 PA6 PA7 output
	orr  r2, 0b00000000000000000101010000000000
	str  r2, [r1]

	ldr  r1, =GPIOA_SPEEDER
	ldr  r2, [r1]
	and  r2, 0b11111111111111110000001111111111 //PA5 PA6 PA7 50MHz
	orr  r2, 0b00000000000000001010100000000000
	str  r2, [r1]*/

	ldr  r1, =GPIOB_BASE // GPIOB_MODER
	ldr  r2, [r1]
	and  r2, 0b11111111111111111100111111111111 //PB6 output
	orr  r2, 0b00000000000000000001000000000000
	str  r2, [r1]

	ldr  r1, =GPIOB_SPEEDER
	ldr  r2, [r1]
	and  r2, 0b11111111111111111100111111111111 //PB6 50MHz
	orr  r2, 0b00000000000000000010000000000000
	str  r2, [r1]

	ldr  r1, =GPIOB_BASE // GPIOB_MODER
	ldr  r2, [r1]
	and  r2, 0b11111111111111111111001111111111 //PB5 input
	orr  r2, 0b00000000000000000000000000000000
	str  r2, [r1]

	ldr r1,=GPIOB_PUPDR
	ldr r2, [r1]
	and r2,#0b11111111111111111100001111111111 //PB5 & PB6 pull-up
	orr r2, 0b00000000000000000001010000000000
	str  r2, [r1]

	pop  {r0, r1, r2, pc}
